#
# ~/.bashrc
#

# If not running interactively, don't do anything
[[ $- != *i* ]] && return

# Bash completion stuff
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

PS1="\[\e[0;32m\]\u\[\e[1;33m\]@\[\e[1;37m\][\[\e[0;36m\]\$(shrink.sh)\[\e[1;37m\]] \[\e[2;32m\]$ \[\e[0m\]"

PATH=$PATH:$HOME/bin:$HOME/bin/games

eval "`dircolors -b`"

echo -ne "Today is "; date
#echo -e ""; cal;
echo -ne "Uptime:";uptime 

HISTCONTROL=ignoreboth:ignorespace

export EDITOR=vim

# HAXE and NME stuff
export HAXE_LIBRARY_PATH=/opt/haxe/std:.
export HAXE_STD_PATH=/opt/haxe/std:.
alias nme='haxelib run nme'

# Make Ctrl+S work
stty -ixon


# Aliases {{{

# Consider moving my aliases here
if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# pacman
alias pacs='pacman -Ss '
alias paci='sudo pacman -S '
alias pacr='sudo pacman -Rsn '
alias pacu='sudo pacman -U '
alias pacy='sudo pacman -Syu '

# yaourt
alias aurs='yaourt -Ss '
alias auri='yaourt -S '

# vim
alias vimp='vim -p '
alias vimrecover='find -iname "*.swp" -print -delete | sed -e "s/\/\./\//" -e "s/\.swp//" | xargs vim -p '
alias vims='vim -S Session.vim'
alias vimrce='vim ~/.vimrc'

# ls 
alias ls='ls --color=auto'
alias ll='ls -l'
alias la='ls -A'
alias l='ls -CF'
alias ltr='ls -ltr'
alias sl='ls'
alias lswc='ls | wc -l'

# cd
alias ..='cd ..'
alias ...="cd ../.."
alias ....="cd ../../.."

# git
alias gita='git add'
alias gits='git status'
alias gitf='git fetch'
alias gitm='git merge origin/master'
alias gitp='git push origin master'
alias gitc='git commit -a -m "'
alias gitd='git diff'

# Various 
alias pgrepl='pgrep -l'
alias bashrce='vim ~/.bashrc'
alias bashrcr='source ~/.bashrc'
alias mex='chmod +x'
alias show='sxiv'
alias c='clear'
alias r='reset'

# Mounting Stuff
alias android-connect="mtpfs -o allow_other /media/android"
alias android-disconnect="fusermount -u /media/android"

# Awesome
alias rcluae='vim $XDG_CONFIG_HOME/awesome/rc.lua'

# Dealing with Archives (see functions below)
alias lar='listarchive'
alias xar='extractarchive'
alias xard='extractarchivedir'
alias xarn='extractarchivedirname'

# Android Stuff
ANDROID_SDK_PATH=/opt/android-sdk
PATH=$PATH:$ANDROID_SDK_PATH/tools:$ANDROID_SDK_PATH/platform-tools

# }}}



# Functions {{{

bashadd() {
  echo "$@" >> ~/.bashrc
  vim ~/.bashrc
}


# Dealing with archives 

listarchive() {
  echo "Listing $1"
  echo "$1" | grep -q ".tar.gz" && tar -tzf "$1" && return
  echo "$1" | grep -q ".tar.xz" && tar -tJf "$1" && return
  echo "$1" | grep -q ".zip" && unzip -l "$1" && return
}

extractarchive() {
  echo "Extracting $1"
  echo "$1" | grep -q ".tar.gz" && tar -xzf "$1" && return
  echo "$1" | grep -q ".tar.xz" && tar -xJf "$1" && return
  echo "$1" | grep -q ".zip" && unzip "$1" && return
}

extractarchivedir() {
  echo "Extracting $2 to $1"
  mkdir "$1"
  cd "$1"
  cp "../$2" .
  extractarchive "$2"
  rm "$2"
  cd ..
}

extractarchivedirname() {
  extractarchivedir "$(echo $1 | cut -d. -f1 | tr ' ' '_')" "$1"
}

# Use cdargs to move around
function cv (){
  cdargs "$1" && cd "`cat "$HOME/.cdargsresult"`" ;
}

encrypt () {
gpg -ac --no-options "$1"
}

decrypt () {
gpg --no-options "$1"
}

# }}}
# for x in $(ls -a | grep -P "[a-z]+"); do mv $x ${x#*.}; done


# Today's Downloads folder creator
TODAY_FOLDER="$(date +%b%d)"
WHERE_DAILY_DOWNLOADS_ARE=dailies
alias today='cd ~/$WHERE_DAILY_DOWNLOADS_ARE/$TODAY_FOLDER'
function dt {
  cd "`eval ~/dev/dateGoto.py $1 $2 $3 $4 $5 $6`"
}

# Move last downloaded to dir 
ldmv () {
  mv ~/Desktop/$(ls -tr ~/Desktop/ | tail -n1) $1
}

# Ripping a TV disk with titles
# Titles in sequential order in a text file
# for x in {2..13}; do ripit.sh $x $(($x+13))_$(head titles -n $(($x+13)) | tail -n 1); done

export SDL_AUDIODRIVER=alsa
export AUDIODEV=hw:0,0

function haxelibzip {
  if [ -z "$1" ] && [ -z "$2" ]; then
    echo "Usage: haxelibzip <foldername> <version>"
  else
    find $1 -not -wholename '*.git*' -not -name '*~' -not -name '.*' | zip $1-$2.zip -@
  fi
}
export PNDSDK="/home/cobra/pandora-dev/arm-2011.09"


#
# Borrowed from: http://jeroenjanssens.com/2013/08/16/quickly-navigate-your-filesystem-from-the-command-line.html
# Functions for jumping quickly
#

export MARKPATH=$HOME/.marks
function jump {
  cd -P $MARKPATH/$1 2>/dev/null || echo "No such mark: $1"
}
function mark {
  mkdir -p $MARKPATH; ln -s $(pwd) $MARKPATH/$1
}
function unmark {
  rm -i $MARKPATH/$1
}
function marks {
  ls -l $MARKPATH | sed 's/  / /g' | cut -d' ' -f9- | sed 's/ -/\t-/g' && echo
}
# Bash autocomplete for jump
# Thanks to: https://news.ycombinator.com/item?id=6229297
function _jump {
  local cur=${COMP_WORDS[COMP_CWORD]}
  local marks=$(find $MARKPATH -type l -printf "%f\n")
  COMPREPLY=($(compgen -W '${marks[@]}' -- "$cur"))
  return 0
}
complete -o default -o nospace -F _jump jump

export CLASSPATH=/home/cobra/AtomicScala/examples:$CLASSPATH

#wget -r -p -l 2 --no-parent -k http://demos.jquerymobile.com/1.4.5/

function fontdina {
  printf '\33]50;%s\007' "xft:Dina:pixelsize=$1"
}

function fontpro {
  printf '\33]50;%s\007' "xft:Profont:pixelsize=$1"
}

function fontterm {
  printf '\33]50;%s\007' "xft:Terminus:pixelsize=$1"
}

PATH=$PATH:$HOME/.gem/ruby/2.2.0/bin


function pattach {
  SESSION=$(tmux ls | percol | cut -d : -f 1)
  [ $? -ne 0 ] && return
  if [[ -n "$SESSION" ]]; then
    tmux att -t $SESSION
  fi
}

alias tmux="TERM=screen-256color-bce tmux"
alias pgrep="pgrep -a"


