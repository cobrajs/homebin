" A Custom ViM file for me
"
set t_Co=256
let g:CSApprox_attr_map = { 'bold' : 'bold', 'italic' : '', 'sp' : '' }

" When started as "evim", evim.vim will already have done these settings.
if v:progname =~? "evim"
  finish
endif

" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

if has("vms")
  set nobackup		" do not keep a backup file, use versions instead
else
  set backup		" keep a backup file
endif
set history=50		" keep 50 lines of command line history
set ruler		" show the cursor position all the time
set showcmd		" display incomplete commands
set incsearch		" do incremental searching
nnoremap / /\v
vnoremap / /\v
set ignorecase
set smartcase
set gdefault
nnoremap <leader><space> :noh<cr>
nnoremap <tab> %
vnoremap <tab> %

" Don't use Ex mode, use Q for formatting
map Q gq

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif

" Only do this part when compiled with support for autocommands.
if has("autocmd")

  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=78

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif

  augroup END

else

  set autoindent		" always set autoindenting on

endif " has("autocmd")

" For 2 wide tabs and 2 space indenting
set mouse=a
set tabstop=2
set shiftwidth=2
set expandtab 

" Old setting to enable passive FTP
let g:netrw_ftpextracmd = "passive"


" Line numbers
set number

au BufWinLeave *.* mkview
au BufWinEnter *.* silent loadview

map <F2> :NERDTreeToggle<CR>
map <F3> :TlistToggle<CR>

let g:miniBufExplMapWindowNavVim = 1
let g:miniBufExplMapWindowNavArrows = 1
let g:miniBufExplMapCTabSwitchBufs = 1
let g:miniBufExplModSelTarget = 1

color zenburn

set switchbuf=useopen,usetab,newtab

set autowrite

command Love wall | !love .

" Function for running whatever you're working on
" Very awesome!
function! RunIt()
  let base = expand("%:e")
  let has_main = system("find " . expand("%:h") . " -name 'main.lua' -maxdepth 1 | wc -l")
  let is_love = system("grep -i 'love.' " . expand("%") . " | wc -l")
  let is_moai = system("grep -i 'moai' " . expand("%") . " | wc -l")
  let is_64 = system("uname -a | grep 'x86_64' | wc -l")
  wall
  if base == 'lua' && has_main > 0
    if is_love > 0
      !love %:h
    elseif is_moai > 0
      !/home/cobra/dev/moai-dev/build/moai/moai /home/cobra/dev/moai-dev/samples/config/config.lua %:h/main.lua
    endif
  elseif base == 'lua' && ! has_main > 0
    !lua %
  elseif base == 'py'
    !python2 %
  elseif base == 'pl'
    !perl %
  elseif base == 'sh'
    !bash %
  elseif base == 'hx'
    if is_64 > 0
      !haxelib run nme test *.nmml neko -64
    else
      !haxelib run nme test *.nmml neko
    endif
  elseif base == 'lsp' || base == 'lisp'
    !clisp %
  else
    !./%
  endif
endfunction

inoremap <Leader>r <esc>:call RunIt()<cr>
nnoremap <Leader>r :call RunIt()<cr>

function! CommentIt()
  let line = getline('.')

  if match(line, '\s*\(\\\{2}\|#\|-\{2}\)') > -1
    let replacement = substitute(line, '\(\s*\)\(\\\{2}\|#\|-\{2}\)', '\1', '')
  else
    let base = expand("%:e")
    if base == 'lua' || base == 'sql'
      let comment = '--'
    elseif base == 'py' || base == 'pl' || base == 'sh'
      let comment = '#'
    elseif base == 'c' || base == 'h' || base == 'cpp' || base == 'java' || base == 'js'
      let comment = '//'
    endif

    let replacement = substitute(line, '\(\s*\)\(\S\)', '\1' . comment . '\2', '')
  endif

  call setline('.', replacement)
endfunction

inoremap ,c <esc>:call CommentIt()<cr>i
nnoremap ,c :call CommentIt()<cr>

" Stuff for Pathogen
call pathogen#infect()
filetype plugin indent on

filetype plugin on

set ofu=syntaxcomplete#Complete

"
" NeoComplCache
"
let g:neocomplcache_enable_at_startup = 1

if !exists('g:neocomplcache_omni_patterns')
  let g:neocomplcache_omni_patterns = {}
endif
let g:neocomplcache_omni_patterns.haxe = '\v([\]''"]|\w)(\.|\()'


"
" Make it easier to copy and paste stuff into vim
"

nnoremap <leader>ya mzggVG"*y`z
inoremap <leader>ya <esc>mzggVG"*y`z

nnoremap <leader>pa ggVG"_d"*pgg"_dd
inoremap <leader>pa <esc>ggVG"_d"*pgg"_dd


nnoremap <c-s> :w<cr>
inoremap <c-s> <esc>:w<cr>i

"
" Alternate between relative and absolute numbering
"
function! NumberingAlternate()
  if set number? == 'number' 
    set relativenumber
  else
    set number
  endif
endfunction

nmap <Leader>n :call NumberingAlternate()<cr>
nmap <Leader>n <esc>:call NumberingAlternate()<cr>i

"
" Add line ending
nnoremap ;; $a;<esc>
inoremap ;; <esc>$a;<esc>
nnoremap ,, $a,<esc>
inoremap ,, <esc>$a,<esc>

" Edit and Source vimrc
nnoremap <leader>ve :vsplit $MYVIMRC<cr>
nnoremap <leader>vs :source $MYVIMRC<cr>

" Exit Insert mode
inoremap jk <esc>

" Custom ignore for CtrlP
let g:ctrlp_custom_ignoe = {
      \ 'dir' : '\v[\/]\.(git|hg|svn)',
      \ 'haxe' : '.*bin\/.*'
      \ }

" For displaying invisibles, like tabs and eols
nmap <leader>l :set list!<cr>
set listchars=tab:¸\ ,eol:¬

augroup filetype_haxe
  autocmd!
  autocmd FileType haxe iabbrev imp import nme.
augroup END


" Slime stuff
let g:slime_target = "tmux"
let g:slime_paste_file = "$HOME/.slime_paste"

" Open Scratch split
nnoremap <leader><tab> :Sscratch<cr>
inoremap <leader><tab> <esc>:Sscratch<cr>

" Open Ack search
nnoremap ,a :Ack 

" Cause, like, I always type this in wrong
command W w
command Q q!

" Clear CtrlP Cache
nnoremap <leader>cc :CtrlPClearCache<cr>
inoremap <leader>cc <esc>:CtrlPClearCache<cr>

" Write on losing focus
au FocusLost * :wa
