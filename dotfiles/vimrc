" A Custom ViM file for me
" call pathogen#infect()
"

"
" auto-install vim-plug
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall
endif

"
" ===========================
" vim-plug block
" ===========================
call plug#begin()

" Plugins 

" fzf: fuzzy searching
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
nnoremap <C-p> :Files<cr>
nnoremap <leader>p :GFiles<cr>

" commentary: commenting lines and stuff
Plug 'tpope/vim-commentary'

" deoplete: completion
" Plug 'Shougo/deoplete.nvim'
" Plug 'roxma/nvim-yarp'
" Plug 'roxma/vim-hug-neovim-rpc'
let g:deoplete#enable_at_startup = 1

" ack: for searching in files
Plug 'mileszs/ack.vim'
if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif

" nerdtree: file browsing and stuff
Plug 'preservim/nerdtree'
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") && v:this_session == "" | NERDTree | endif

" Syntax Highlighting
" Plug 'othree/yajs'
" Plug 'othree/html5'
Plug 'sheerun/vim-polyglot'

" HTML Expanding with Emmet
Plug 'mattn/emmet-vim'

Plug 'w0rp/ale'

" Themes
Plug 'mhartington/oceanic-next'
Plug 'jnurmine/Zenburn'

call plug#end()



" Theme settings 
set t_Co=256
if (has("termguicolors") && !&term =~# '^screen')
  set termguicolors
endif
set background=dark

" color zenburn
colorscheme OceanicNext


let g:CSApprox_attr_map = { 'bold' : 'bold', 'italic' : '', 'sp' : '' }

set shell=/bin/bash

" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect
set nocompatible

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

if has("vms")
  set nobackup		" do not keep a backup file, use versions instead
else
  set backup		" keep a backup file
endif
set history=50		" keep 50 lines of command line history
set ruler		" show the cursor position all the time
set showcmd		" display incomplete commands
set incsearch		" do incremental searching
set textwidth=0

" Magic search
nnoremap / /\v
vnoremap / /\v

set ignorecase
set smartcase
set gdefault

let mapleader=','
nnoremap <leader><space> :noh<cr>
nnoremap <tab> %
vnoremap <tab> %
" if using powerline, uncomment
" set laststatus=2

" Don't use Ex mode, use Q for formatting
map Q gq

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif

" Only do this part when compiled with support for autocommands.
if has("autocmd")

  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif

  augroup END

else

  set autoindent		" always set autoindenting on

endif " has("autocmd")

" For 2 wide tabs and 2 space indenting
set mouse=a
set tabstop=2
set shiftwidth=2
set expandtab 

" Old setting to enable passive FTP
let g:netrw_ftpextracmd = "passive"


" Line numbers
set number

" Cursor line
set cursorline

au BufWinLeave *.* mkview
au BufWinEnter *.* silent loadview

map <F2> :NERDTreeToggle<CR>
" map <F3> :TlistToggle<CR>

" let g:miniBufExplMapWindowNavVim = 1
" let g:miniBufExplMapWindowNavArrows = 1
" let g:miniBufExplMapCTabSwitchBufs = 1
" let g:miniBufExplModSelTarget = 1

set switchbuf=useopen,usetab,newtab

" set autowrite

command! Love wall | !love .

" Function for running whatever you're working on
" Very awesome!
function! RunIt()
  let base = expand("%:e")
  let has_main = system("find " . expand("%:h") . " -maxdepth 1 -name 'main.lua' | wc -l")
  let has_html_index = system("find " . expand("%:h") . " -maxdepth 1 -name 'index.html' | wc -l")
  let pico8window = trim(system("xdotool search --class 'pico8'"))
  let is_love = system("grep -i 'love.' " . expand("%") . " | wc -l")
  let is_moai = system("grep -i 'moai' " . expand("%") . " | wc -l")
  let is_64 = system("uname -a | grep 'x86_64' | wc -l")
  let is_cargo = system("find " . expand("%:p:h:h") . " -maxdepth 1 -name 'Cargo.toml' | wc -l")
  wall
  if base == 'lua' && has_main > 0
    if is_love > 0
      !love %:h
    elseif is_moai > 0
      !moai %:h/main.lua
    endif
  elseif base == 'js' || base == 'html' && has_html_index > 0
    !html_runner %:h
  elseif base == 'html'
    !html_runner %
  elseif base == 'p8' && pico8window
    execute "silent !xdotool key --window " . pico8window . " ctrl+r"
    redraw!
  elseif base == 'lua' && ! has_main > 0
    !lua %
  elseif base == 'py'
    !python %
  elseif base == 'pl'
    !perl %
  elseif base == 'sh'
    !bash %
  elseif base == 'hx' || base == 'nmml'
    !lime test neko -debug
  elseif base == 'lsp' || base == 'lisp'
    !clisp %
  elseif base == 'scala'
    !scala -classpath ~/AtomicScala/examples/ %
  elseif base == 'pde'
    !processing-java --sketch=%:h --output=/home/cobra/tmp/processing-output --force --run
  elseif base == 'nim'
    !nim c -r %
  elseif base == 'js'
    !node %
  elseif is_cargo > 0 
    !cargo run
  else
    !./%
  endif
endfunction

inoremap <Leader>r <esc>:call RunIt()<cr>
nnoremap <Leader>r :call RunIt()<cr>

filetype plugin indent on
filetype plugin on

nnoremap <c-s> :w<cr>
inoremap <c-s> <esc>:w<cr>i

"
" Alternate between relative and absolute numbering
"
function! NumberingAlternate()
  if set number? == 'number' 
    set relativenumber
  else
    set number
  endif
endfunction

nmap <Leader>n :call NumberingAlternate()<cr>
nmap <Leader>n <esc>:call NumberingAlternate()<cr>i

" Edit and Source vimrc
nnoremap <leader>ve :vsplit $MYVIMRC<cr>
nnoremap <leader>vs :source $MYVIMRC<cr>

" The best ever for exiting insert mode
inoremap jk <esc>

" Custom ignore for CtrlP

" For displaying invisibles, like tabs and eols
nmap <leader>l :set list!<cr>
set listchars=tab:¸\ ,eol:¬

" Open Ack search
nnoremap <leader>a :Ack 

" Cause, like, I always type this in wrong
command! W w
command! Q q!

" Clear CtrlP Cache
nnoremap <leader>cc :CtrlPClearCache<cr>
inoremap <leader>cc <esc>:CtrlPClearCache<cr>

" Write on losing focus
" au FocusLost * :wa

" Switch to previous buffer 
nnoremap <leader>e :b#<cr>

" Toggle the NERD TREE
nnoremap <leader>t :NERDTreeToggle<cr>

" Toggle the TagList
nnoremap <leader>g :TlistToggle<cr>
nnoremap <leader>b :ls<cr>:b
nnoremap <leader>n :nohl<cr>

nnoremap H gT
nnoremap L gt

" Fast Tab Nav and Movement
nnoremap H gT
nnoremap L gt

" Visual movement
nnoremap j gj
vnoremap j gj
nnoremap k gk
vnoremap k gk

nnoremap <leader>db :diffthis<cr><c-w><c-w>:diffthis<cr>

" Set noexpandtab for Makefiles
au BufRead,BufNewFile Makefile set noexpandtab

nnoremap <leader>m :make<cr>
inoremap <leader>m <esc>:make<cr>

" Swap x for y and width for height
nnoremap <leader>xy :s/x/y/I<cr>:s/X/Y/I<cr>
nnoremap <leader>yx :s/y/x/I<cr>:s/Y/X/I<cr>

nnoremap <leader>wh :s/width/height/I<cr>:s/Width/Height/I<cr>
nnoremap <leader>hw :s/height/width/I<cr>:s/Height/Width/I<cr>


" NeoComplete
" let g:neocomplete#enable_at_startup = 1

" UltiSnips
" let g:UltiSnipsExpandTrigger="<c-j>"
" let g:UltiSnipsJumpForwardTrigger="<c-j>"
" let g:UltiSnipsJumpBackwardTrigger="<c-k>"

"
" Experimenting... shortcuts with spacebar
"

" Window movement
nnoremap <space>l <C-w>l
nnoremap <space>h <C-w>h
nnoremap <space>j <C-w>j
nnoremap <space>k <C-w>k

" File related
nnoremap <space>q :q<cr>
nnoremap <space>w :w<cr>

" Backup stuff
set backup
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set backupskip=/tmp/*
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set writebackup

"
" Suuuper dope statusline
set statusline=%-5.4n%t%h%m%r%w%=(x%b,\ L%l,\ C%c%V,\ %<%P)

"
" Ignores for CtrlP
"
if exists("g:ctrlp_user_command")
  unlet g:ctrlp_user_command
endif
set wildignore+=*/vendor/*
set wildignore+=*/node_modules/*
set wildignore+=*/build/*
set wildignore+=*/plugins/*
set wildignore+=*/platforms/*
set wildignore+=*/bin/*

"
" JSON reformatter
command! FormatJSON %!python -m json.tool
nnoremap <leader>js :FormatJSON<cr>

" Search for selection
vnoremap // y/<C-R>"<CR>

set sessionoptions=blank,buffers,curdir,folds,help,tabpages,winsize

" Supposedly helps Vim with Kitty
let &t_ut=''

" Enable italic comments
highlight Comment cterm=italic

